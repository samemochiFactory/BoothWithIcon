{"version":3,"file":"background.js","sources":["../../src/background.js"],"sourcesContent":["\r\nchrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {\r\n    // if (msg.action === 'download') {\r\n    //     //商品をDLするときに使われる\r\n    //     console.log(\"filename:\", msg.filename);\r\n    //     console.log(\"url:\", msg.url);\r\n    //     chrome.downloads.download({\r\n    //         url: msg.url,\r\n    //         filename: msg.filename,\r\n    //         saveAs: true\r\n    //     }, (downloadId) => {\r\n    //         if (chrome.runtime.lastError) {\r\n    //             console.error('Download error:', chrome.runtime.lastError);\r\n    //         } else {\r\n    //             console.log('Download started:', downloadId);\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    //TODO:fetch系の関数は共通化して，responseの処理方法をフロント側で変えるとかする．\r\n    if (msg.action === \"fetchItemInfo\") {\r\n        //商品ページ.jsonを取得するときに使われる\r\n        console.log(\"fetchItemInfo\");\r\n        console.log(msg.url);\r\n        fetch(msg.url)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(`response status : ${response.status}`);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                sendResponse({ data });\r\n            })\r\n            .catch(error => {\r\n                console.error(\"fetch error:\", error);\r\n                console.error(\"error url:\", msg.url)\r\n                sendResponse({ error: error.msg });\r\n            });\r\n\r\n        return true; // 非同期応答のためにtrueを返す\r\n    }\r\n    //チャンク送信\r\n    if (msg.action === \"fetchItem\") {\r\n        const CHUNK_SIZE = 10 * 1024 * 1024; // 10MB チャンクサイズ\r\n\r\n        fetch(msg.url)\r\n            .then(response => response.blob())\r\n            .then(async blob => {//クソデカblob\r\n                // console.log(\"send blobtype : \", blob.type);\r\n                const totalChunks = Math.ceil(blob.size / CHUNK_SIZE);\r\n\r\n                // 最初のレスポンスでメタデータを送信\r\n                sendResponse({\r\n                    status: \"start\",\r\n                    totalChunks: totalChunks,\r\n                    totalSize: blob.size,\r\n                    type: blob.type\r\n                });\r\n                // console.log(\"sending progress to id : \", msg.progressBarId);\r\n                // チャンクごとに処理\r\n                for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {\r\n                    const start = chunkIndex * CHUNK_SIZE;\r\n                    const end = Math.min(start + CHUNK_SIZE, blob.size);\r\n                    const chunkBlob = blob.slice(start, end);\r\n\r\n                    // チャンクをBase64に変換\r\n                    const reader = new FileReader();\r\n\r\n                    // Promiseでラップして同期的に処理\r\n                    await new Promise(resolve => {\r\n                        reader.onloadend = () => {\r\n                            // チャンクデータをcontent.jsに送信\r\n                            chrome.tabs.sendMessage(sender.tab.id, {\r\n                                action: \"receiveChunk\",\r\n                                chunkIndex: chunkIndex,\r\n                                totalChunks: totalChunks,\r\n                                dataUrl: reader.result,\r\n                                progressBarId: msg.progressBarId\r\n                            });\r\n                            resolve();\r\n                        };\r\n                        reader.readAsDataURL(chunkBlob);\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(\"chunk sending error:\", error);\r\n                chrome.tabs.sendMessage(sender.tab.id, {\r\n                    action: \"downloadError\",\r\n                    downloadId: msg.downloadId,\r\n                    error: error.toString()\r\n                });\r\n            });\r\n\r\n        // 非同期処理を行うため、sendResponseを後で呼び出すことを示す\r\n        return true;\r\n    }\r\n    if (msg.action === \"fetchThumbnail\") {\r\n        //サムネイル画像を取得するときに使われる\r\n        console.log(\"fetchThumbnail\");\r\n        console.log(msg.url);\r\n        fetch(msg.url)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(`response status: ${response.status}`);\r\n                }\r\n                return response.arrayBuffer();\r\n            })\r\n            .then(arrayBuffer => {\r\n                sendResponse({ data: Array.from(new Uint8Array(arrayBuffer)) });\r\n            })\r\n            .catch(error => {\r\n                console.error(\"fetch error\", error);\r\n                sendResponse({ error: error.msg, data: null });\r\n            });\r\n        return true; // 非同期応答のためにtrueを返す\r\n    }\r\n    if (msg.action === 'downloadZip') {\r\n        chrome.downloads.download({\r\n            url: msg.blobUrl,\r\n            filename: msg.filename,\r\n            saveAs: true\r\n        }, downloadId => {\r\n            if (chrome.runtime.lastError) {\r\n                console.error('Download failed:', chrome.runtime.lastError);\r\n            } else {\r\n                console.log('Download started:', downloadId);\r\n            }\r\n        });\r\n    }\r\n});"],"names":["msg","sender","sendResponse","response","data","error","blob","totalChunks","chunkIndex","start","end","chunkBlob","reader","resolve","arrayBuffer","downloadId"],"mappings":"AACA,OAAO,QAAQ,UAAU,YAAY,CAACA,EAAKC,EAAQC,IAAiB,CAmBhE,GAAIF,EAAI,SAAW,gBAEf,eAAQ,IAAI,eAAe,EAC3B,QAAQ,IAAIA,EAAI,GAAG,EACnB,MAAMA,EAAI,GAAG,EACR,KAAKG,GAAY,CACd,GAAI,CAACA,EAAS,GACV,MAAM,IAAI,MAAM,qBAAqBA,EAAS,MAAM,EAAE,EAE1D,OAAOA,EAAS,MAChC,CAAa,EACA,KAAKC,GAAQ,CACVF,EAAa,CAAE,KAAAE,CAAI,CAAE,CACrC,CAAa,EACA,MAAMC,GAAS,CACZ,QAAQ,MAAM,eAAgBA,CAAK,EACnC,QAAQ,MAAM,aAAcL,EAAI,GAAG,EACnCE,EAAa,CAAE,MAAOG,EAAM,GAAK,CAAA,CACjD,CAAa,EAEE,GAGX,GAAIL,EAAI,SAAW,YAGf,aAAMA,EAAI,GAAG,EACR,KAAKG,GAAYA,EAAS,MAAM,EAChC,KAAK,MAAMG,GAAQ,CAEhB,MAAMC,EAAc,KAAK,KAAKD,EAAK,KAAO,QAAU,EAGpDJ,EAAa,CACT,OAAQ,QACR,YAAaK,EACb,UAAWD,EAAK,KAChB,KAAMA,EAAK,IAC/B,CAAiB,EAGD,QAASE,EAAa,EAAGA,EAAaD,EAAaC,IAAc,CAC7D,MAAMC,EAAQD,EAAa,SACrBE,EAAM,KAAK,IAAID,EAAQ,SAAYH,EAAK,IAAI,EAC5CK,EAAYL,EAAK,MAAMG,EAAOC,CAAG,EAGjCE,EAAS,IAAI,WAGnB,MAAM,IAAI,QAAQC,GAAW,CACzBD,EAAO,UAAY,IAAM,CAErB,OAAO,KAAK,YAAYX,EAAO,IAAI,GAAI,CACnC,OAAQ,eACR,WAAYO,EACZ,YAAaD,EACb,QAASK,EAAO,OAChB,cAAeZ,EAAI,aACnD,CAA6B,EACDa,GAC5B,EACwBD,EAAO,cAAcD,CAAS,CACtD,CAAqB,CACJ,CACjB,CAAa,EACA,MAAMN,GAAS,CACZ,QAAQ,MAAM,uBAAwBA,CAAK,EAC3C,OAAO,KAAK,YAAYJ,EAAO,IAAI,GAAI,CACnC,OAAQ,gBACR,WAAYD,EAAI,WAChB,MAAOK,EAAM,SAAU,CAC3C,CAAiB,CACjB,CAAa,EAGE,GAEX,GAAIL,EAAI,SAAW,iBAEf,eAAQ,IAAI,gBAAgB,EAC5B,QAAQ,IAAIA,EAAI,GAAG,EACnB,MAAMA,EAAI,GAAG,EACR,KAAKG,GAAY,CACd,GAAI,CAACA,EAAS,GACV,MAAM,IAAI,MAAM,oBAAoBA,EAAS,MAAM,EAAE,EAEzD,OAAOA,EAAS,aAChC,CAAa,EACA,KAAKW,GAAe,CACjBZ,EAAa,CAAE,KAAM,MAAM,KAAK,IAAI,WAAWY,CAAW,CAAC,CAAC,CAAE,CAC9E,CAAa,EACA,MAAMT,GAAS,CACZ,QAAQ,MAAM,cAAeA,CAAK,EAClCH,EAAa,CAAE,MAAOG,EAAM,IAAK,KAAM,IAAI,CAAE,CAC7D,CAAa,EACE,GAEPL,EAAI,SAAW,eACf,OAAO,UAAU,SAAS,CACtB,IAAKA,EAAI,QACT,SAAUA,EAAI,SACd,OAAQ,EACX,EAAEe,GAAc,CACT,OAAO,QAAQ,UACf,QAAQ,MAAM,mBAAoB,OAAO,QAAQ,SAAS,EAE1D,QAAQ,IAAI,oBAAqBA,CAAU,CAE3D,CAAS,CAET,CAAC"}