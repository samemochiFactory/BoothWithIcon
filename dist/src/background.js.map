{"version":3,"file":"background.js","sources":["../../src/background.js"],"sourcesContent":["\r\nchrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {\r\n    // if (msg.action === 'download') {\r\n    //     //商品をDLするときに使われる\r\n    //     console.log(\"filename:\", msg.filename);\r\n    //     console.log(\"url:\", msg.url);\r\n    //     chrome.downloads.download({\r\n    //         url: msg.url,\r\n    //         filename: msg.filename,\r\n    //         saveAs: true\r\n    //     }, (downloadId) => {\r\n    //         if (chrome.runtime.lastError) {\r\n    //             console.error('Download error:', chrome.runtime.lastError);\r\n    //         } else {\r\n    //             console.log('Download started:', downloadId);\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    //TODO:fetch系の関数は共通化して，responseの処理方法をフロント側で変えるとかする．\r\n    if (msg.action === \"fetchItemInfo\") {\r\n        //商品ページ.jsonを取得するときに使われる\r\n        console.log(\"fetchItemInfo\");\r\n        console.log(msg.url);\r\n        fetch(msg.url)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(`response status : ${response.status}`);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                sendResponse({ data });\r\n            })\r\n            .catch(error => {\r\n                console.error(\"fetch error:\", error);\r\n                console.error(\"error url:\", msg.url)\r\n                sendResponse({ error: error.msg });\r\n            });\r\n\r\n        return true; // 非同期応答のためにtrueを返す\r\n    }\r\n    //チャンク送信\r\n    if (msg.action === \"fetchItem\") {\r\n        const CHUNK_SIZE = 10 * 1024 * 1024; // 10MB チャンクサイズ\r\n\r\n        fetch(msg.url)\r\n            .then(response => response.blob())\r\n            .then(async blob => {//クソデカblob\r\n                // console.log(\"send blobtype : \", blob.type);\r\n                const totalChunks = Math.ceil(blob.size / CHUNK_SIZE);\r\n\r\n                // 最初のレスポンスでメタデータを送信\r\n                sendResponse({\r\n                    status: \"start\",\r\n                    totalChunks: totalChunks,\r\n                    totalSize: blob.size,\r\n                    type: blob.type\r\n                });\r\n                // console.log(\"sending progress to id : \", msg.progressBarId);\r\n                // チャンクごとに処理\r\n                for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {\r\n                    const start = chunkIndex * CHUNK_SIZE;\r\n                    const end = Math.min(start + CHUNK_SIZE, blob.size);\r\n                    const chunkBlob = blob.slice(start, end);\r\n\r\n                    // チャンクをBase64に変換\r\n                    const reader = new FileReader();\r\n\r\n                    // Promiseでラップして同期的に処理\r\n                    await new Promise(resolve => {\r\n                        reader.onloadend = () => {\r\n                            // チャンクデータをcontent.jsに送信\r\n                            chrome.tabs.sendMessage(sender.tab.id, {\r\n                                action: \"receiveChunk\",\r\n                                chunkIndex: chunkIndex,\r\n                                totalChunks: totalChunks,\r\n                                dataUrl: reader.result,\r\n                                progressBarId: msg.progressBarId\r\n                            });\r\n                            resolve();\r\n                        };\r\n                        reader.readAsDataURL(chunkBlob);\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(\"chunk sending error:\", error);\r\n                chrome.tabs.sendMessage(sender.tab.id, {\r\n                    action: \"downloadError\",\r\n                    downloadId: msg.downloadId,\r\n                    error: error.toString()\r\n                });\r\n            });\r\n\r\n        // 非同期処理を行うため、sendResponseを後で呼び出すことを示す\r\n        return true;\r\n    }\r\n    if (msg.action === \"fetchThumbnail\") {\r\n        //サムネイル画像を取得するときに使われる\r\n        console.log(\"fetchThumbnail\");\r\n        console.log(msg.url);\r\n        fetch(msg.url)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(`response status: ${response.status}`);\r\n                }\r\n                return response.arrayBuffer();\r\n            })\r\n            .then(arrayBuffer => {\r\n                sendResponse({ data: Array.from(new Uint8Array(arrayBuffer)) });\r\n            })\r\n            .catch(error => {\r\n                console.error(\"fetch error\", error);\r\n                sendResponse({ error: error.msg, data: null });\r\n            });\r\n        return true; // 非同期応答のためにtrueを返す\r\n    }\r\n    if (msg.action === 'downloadZip') {\r\n        chrome.downloads.download({\r\n            url: msg.blobUrl,\r\n            filename: msg.filename,\r\n            saveAs: true\r\n        }, downloadId => {\r\n            if (chrome.runtime.lastError) {\r\n                console.error('Download failed:', chrome.runtime.lastError);\r\n            } else {\r\n                console.log('Download started:', downloadId);\r\n            }\r\n        });\r\n    }\r\n});"],"names":[],"mappings":"AACA,OAAO,QAAQ,UAAU,YAAY,CAAC,KAAK,QAAQ,iBAAiB;AAmBhE,MAAI,IAAI,WAAW,iBAAiB;AAEhC,YAAQ,IAAI,eAAe;AAC3B,YAAQ,IAAI,IAAI,GAAG;AACnB,UAAM,IAAI,GAAG,EACR,KAAK,cAAY;AACd,UAAI,CAAC,SAAS,IAAI;AACd,cAAM,IAAI,MAAM,qBAAqB,SAAS,MAAM,EAAE;AAAA,MACzD;AACD,aAAO,SAAS;IAChC,CAAa,EACA,KAAK,UAAQ;AACV,mBAAa,EAAE,KAAI,CAAE;AAAA,IACrC,CAAa,EACA,MAAM,WAAS;AACZ,cAAQ,MAAM,gBAAgB,KAAK;AACnC,cAAQ,MAAM,cAAc,IAAI,GAAG;AACnC,mBAAa,EAAE,OAAO,MAAM,IAAK,CAAA;AAAA,IACjD,CAAa;AAEL,WAAO;AAAA,EACV;AAED,MAAI,IAAI,WAAW,aAAa;AAC5B,UAAM,aAAa,KAAK,OAAO;AAE/B,UAAM,IAAI,GAAG,EACR,KAAK,cAAY,SAAS,MAAM,EAChC,KAAK,OAAM,SAAQ;AAEhB,YAAM,cAAc,KAAK,KAAK,KAAK,OAAO,UAAU;AAGpD,mBAAa;AAAA,QACT,QAAQ;AAAA,QACR;AAAA,QACA,WAAW,KAAK;AAAA,QAChB,MAAM,KAAK;AAAA,MAC/B,CAAiB;AAGD,eAAS,aAAa,GAAG,aAAa,aAAa,cAAc;AAC7D,cAAM,QAAQ,aAAa;AAC3B,cAAM,MAAM,KAAK,IAAI,QAAQ,YAAY,KAAK,IAAI;AAClD,cAAM,YAAY,KAAK,MAAM,OAAO,GAAG;AAGvC,cAAM,SAAS,IAAI;AAGnB,cAAM,IAAI,QAAQ,aAAW;AACzB,iBAAO,YAAY,MAAM;AAErB,mBAAO,KAAK,YAAY,OAAO,IAAI,IAAI;AAAA,cACnC,QAAQ;AAAA,cACR;AAAA,cACA;AAAA,cACA,SAAS,OAAO;AAAA,cAChB,eAAe,IAAI;AAAA,YACnD,CAA6B;AACD;UAC5B;AACwB,iBAAO,cAAc,SAAS;AAAA,QACtD,CAAqB;AAAA,MACJ;AAAA,IACjB,CAAa,EACA,MAAM,WAAS;AACZ,cAAQ,MAAM,wBAAwB,KAAK;AAC3C,aAAO,KAAK,YAAY,OAAO,IAAI,IAAI;AAAA,QACnC,QAAQ;AAAA,QACR,YAAY,IAAI;AAAA,QAChB,OAAO,MAAM,SAAU;AAAA,MAC3C,CAAiB;AAAA,IACjB,CAAa;AAGL,WAAO;AAAA,EACV;AACD,MAAI,IAAI,WAAW,kBAAkB;AAEjC,YAAQ,IAAI,gBAAgB;AAC5B,YAAQ,IAAI,IAAI,GAAG;AACnB,UAAM,IAAI,GAAG,EACR,KAAK,cAAY;AACd,UAAI,CAAC,SAAS,IAAI;AACd,cAAM,IAAI,MAAM,oBAAoB,SAAS,MAAM,EAAE;AAAA,MACxD;AACD,aAAO,SAAS;IAChC,CAAa,EACA,KAAK,iBAAe;AACjB,mBAAa,EAAE,MAAM,MAAM,KAAK,IAAI,WAAW,WAAW,CAAC,EAAC,CAAE;AAAA,IAC9E,CAAa,EACA,MAAM,WAAS;AACZ,cAAQ,MAAM,eAAe,KAAK;AAClC,mBAAa,EAAE,OAAO,MAAM,KAAK,MAAM,KAAI,CAAE;AAAA,IAC7D,CAAa;AACL,WAAO;AAAA,EACV;AACD,MAAI,IAAI,WAAW,eAAe;AAC9B,WAAO,UAAU,SAAS;AAAA,MACtB,KAAK,IAAI;AAAA,MACT,UAAU,IAAI;AAAA,MACd,QAAQ;AAAA,IACX,GAAE,gBAAc;AACb,UAAI,OAAO,QAAQ,WAAW;AAC1B,gBAAQ,MAAM,oBAAoB,OAAO,QAAQ,SAAS;AAAA,MAC1E,OAAmB;AACH,gBAAQ,IAAI,qBAAqB,UAAU;AAAA,MAC9C;AAAA,IACb,CAAS;AAAA,EACJ;AACL,CAAC;"}