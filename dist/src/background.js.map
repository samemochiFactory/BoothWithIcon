{"version":3,"file":"background.js","sources":["../../src/background.js"],"sourcesContent":["\r\nchrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {\r\n    // if (msg.action === 'download') {\r\n    //     //商品をDLするときに使われる\r\n    //     console.log(\"filename:\", msg.filename);\r\n    //     console.log(\"url:\", msg.url);\r\n    //     chrome.downloads.download({\r\n    //         url: msg.url,\r\n    //         filename: msg.filename,\r\n    //         saveAs: true\r\n    //     }, (downloadId) => {\r\n    //         if (chrome.runtime.lastError) {\r\n    //             console.error('Download error:', chrome.runtime.lastError);\r\n    //         } else {\r\n    //             console.log('Download started:', downloadId);\r\n    //         }\r\n    //     });\r\n    // }\r\n\r\n    //TODO:fetch系の関数は共通化して，responseの処理方法をフロント側で変えるとかする．\r\n    if (msg.action === \"fetchItemInfo\") {\r\n        //商品ページ.jsonを取得するときに使われる\r\n        console.log(\"fetchItemInfo\");\r\n        console.log(msg.url);\r\n        fetch(msg.url)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(`response status : ${response.status}`);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                sendResponse({ data });\r\n            })\r\n            .catch(error => {\r\n                console.error(\"fetch error:\", error);\r\n                console.error(\"error url:\", msg.url)\r\n                sendResponse({ error: error.msg });\r\n            });\r\n\r\n        return true; // 非同期応答のためにtrueを返す\r\n    }\r\n    //チャンク送信\r\n    if (msg.action === \"fetchItem\") {\r\n        const CHUNK_SIZE = 10 * 1024 * 1024; // 10MB チャンクサイズ\r\n\r\n        fetch(msg.url)\r\n            .then(response => response.blob())\r\n            .then(async blob => {//クソデカblob\r\n                // console.log(\"send blobtype : \", blob.type);\r\n                const totalChunks = Math.ceil(blob.size / CHUNK_SIZE);\r\n\r\n                // 最初のレスポンスでメタデータを送信\r\n                sendResponse({\r\n                    status: \"start\",\r\n                    totalChunks: totalChunks,\r\n                    totalSize: blob.size,\r\n                    type: blob.type\r\n                });\r\n                // console.log(\"sending progress to id : \", msg.progressBarId);\r\n                // チャンクごとに処理\r\n                for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {\r\n                    const start = chunkIndex * CHUNK_SIZE;\r\n                    const end = Math.min(start + CHUNK_SIZE, blob.size);\r\n                    const chunkBlob = blob.slice(start, end);\r\n\r\n                    // チャンクをBase64に変換\r\n                    const reader = new FileReader();\r\n\r\n                    // Promiseでラップして同期的に処理\r\n                    await new Promise(resolve => {\r\n                        reader.onloadend = () => {\r\n                            // チャンクデータをcontent.jsに送信\r\n                            chrome.tabs.sendMessage(sender.tab.id, {\r\n                                action: \"receiveChunk\",\r\n                                chunkIndex: chunkIndex,\r\n                                totalChunks: totalChunks,\r\n                                dataUrl: reader.result,\r\n                                progressBarId: msg.progressBarId\r\n                            });\r\n                            resolve();\r\n                        };\r\n                        reader.readAsDataURL(chunkBlob);\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(\"chunk sending error:\", error);\r\n                chrome.tabs.sendMessage(sender.tab.id, {\r\n                    action: \"downloadError\",\r\n                    downloadId: msg.downloadId,\r\n                    error: error.toString()\r\n                });\r\n            });\r\n\r\n        // 非同期処理を行うため、sendResponseを後で呼び出すことを示す\r\n        return true;\r\n    }\r\n    if (msg.action === \"fetchThumbnail\") {\r\n        //サムネイル画像を取得するときに使われる\r\n        console.log(\"fetchThumbnail\");\r\n        console.log(msg.url);\r\n        fetch(msg.url)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(`response status: ${response.status}`);\r\n                }\r\n                return response.arrayBuffer();\r\n            })\r\n            .then(arrayBuffer => {\r\n                sendResponse({ data: Array.from(new Uint8Array(arrayBuffer)) });\r\n            })\r\n            .catch(error => {\r\n                console.error(\"fetch error\", error);\r\n                sendResponse({ error: error.msg, data: null });\r\n            });\r\n        return true; // 非同期応答のためにtrueを返す\r\n    }\r\n    if (msg.action === 'downloadZip') {\r\n        chrome.downloads.download({\r\n            url: msg.blobUrl,\r\n            filename: msg.filename,\r\n            saveAs: true\r\n        }, downloadId => {\r\n            if (chrome.runtime.lastError) {\r\n                console.error('Download failed:', chrome.runtime.lastError);\r\n            } else {\r\n                console.log('Download started:', downloadId);\r\n            }\r\n        });\r\n    }\r\n});"],"names":["chrome","runtime","onMessage","addListener","msg","sender","sendResponse","action","fetch","url","then","response","ok","Error","status","json","data","catch","error","CHUNK_SIZE","blob","async","totalChunks","Math","ceil","size","totalSize","type","chunkIndex","start","end","min","chunkBlob","slice","reader","FileReader","Promise","resolve","onloadend","tabs","sendMessage","tab","id","dataUrl","result","progressBarId","readAsDataURL","downloadId","toString","arrayBuffer","Array","from","Uint8Array","downloads","download","blobUrl","filename","saveAs","lastError"],"mappings":"AACAA,OAAOC,QAAQC,UAAUC,aAAY,CAACC,EAAKC,EAAQC,KAmB3C,GAAe,kBAAfF,EAAIG,OAoBG,OAhBPC,MAAMJ,EAAIK,KACLC,MAAiBC,IACV,IAACA,EAASC,GACV,MAAM,IAAIC,MAAM,qBAAqBF,EAASG,UAElD,OAAOH,EAASI,UAEnBL,MAAaM,IACGV,EAAA,CAAEU,YAElBC,OAAeC,IAGZZ,EAAa,CAAEY,MAAOA,EAAMd,UAG7B,EAGP,GAAe,cAAfA,EAAIG,OAAwB,CACtB,MAAAY,EAAa,SAoDZ,OAlDDX,MAAAJ,EAAIK,KACLC,MAAKC,GAAYA,EAASS,SAC1BV,MAAKW,MAAMD,IAER,MAAME,EAAcC,KAAKC,KAAKJ,EAAKK,KAAON,GAG7Bb,EAAA,CACTQ,OAAQ,QACRQ,cACAI,UAAWN,EAAKK,KAChBE,KAAMP,EAAKO,OAIf,IAAA,IAASC,EAAa,EAAGA,EAAaN,EAAaM,IAAc,CAC7D,MAAMC,EAAQD,EAAaT,EACrBW,EAAMP,KAAKQ,IAAIF,EAAQV,EAAYC,EAAKK,MACxCO,EAAYZ,EAAKa,MAAMJ,EAAOC,GAG9BI,EAAS,IAAIC,iBAGb,IAAIC,SAAmBC,IACzBH,EAAOI,UAAY,KAEftC,OAAOuC,KAAKC,YAAYnC,EAAOoC,IAAIC,GAAI,CACnCnC,OAAQ,eACRqB,aACAN,cACAqB,QAAST,EAAOU,OAChBC,cAAezC,EAAIyC,qBAI3BX,EAAOY,cAAcd,KAE5B,KAEJf,OAAeC,IAEZlB,OAAOuC,KAAKC,YAAYnC,EAAOoC,IAAIC,GAAI,CACnCnC,OAAQ,gBACRwC,WAAY3C,EAAI2C,WAChB7B,MAAOA,EAAM8B,iBAKlB,CACV,CACG,GAAe,mBAAf5C,EAAIG,OAkBG,OAdPC,MAAMJ,EAAIK,KACLC,MAAiBC,IACV,IAACA,EAASC,GACV,MAAM,IAAIC,MAAM,oBAAoBF,EAASG,UAEjD,OAAOH,EAASsC,iBAEnBvC,MAAoBuC,IACJ3C,EAAA,CAAEU,KAAMkC,MAAMC,KAAK,IAAIC,WAAWH,SAElDhC,OAAeC,IAEZZ,EAAa,CAAEY,MAAOA,EAAMd,IAAKY,KAAM,WAExC,EAEQ,gBAAfZ,EAAIG,QACJP,OAAOqD,UAAUC,SAAS,CACtB7C,IAAKL,EAAImD,QACTC,SAAUpD,EAAIoD,SACdC,QAAQ,IACKV,IACT/C,OAAOC,QAAQyD"}