chrome.runtime.onMessage.addListener((o,c,t)=>{if(o.action==="download"&&(console.log("filename:",o.filename),console.log("url:",o.url),chrome.downloads.download({url:o.url,filename:o.filename,saveAs:!0},r=>{chrome.runtime.lastError?console.error("Download error:",chrome.runtime.lastError):console.log("Download started:",r)})),o.action==="fetchItemInfo")return console.log("fetchItemInfo"),console.log(o.url),fetch(o.url).then(r=>{if(!r.ok)throw new Error(`response status : ${r.status}`);return r.json()}).then(r=>{t({data:r})}).catch(r=>{console.error("fetch error:",r),console.error("error url:",o.url),t({error:r.msg})}),!0;if(o.action==="fetchItem")return fetch(o.url).then(e=>e.blob()).then(async e=>{const a=Math.ceil(e.size/10485760);t({status:"start",totalChunks:a,totalSize:e.size,type:e.type});for(let n=0;n<a;n++){const i=n*10485760,u=Math.min(i+10485760,e.size),d=e.slice(i,u),l=new FileReader;await new Promise(h=>{l.onloadend=()=>{chrome.tabs.sendMessage(c.tab.id,{action:"receiveChunk",chunkIndex:n,totalChunks:a,dataUrl:l.result,progressBarId:o.progressBarId}),h()},l.readAsDataURL(d)})}}).catch(e=>{console.error("chunk sending error:",e),chrome.tabs.sendMessage(c.tab.id,{action:"downloadError",downloadId:o.downloadId,error:e.toString()})}),!0;if(o.action==="fetchThumbnail")return console.log("fetchThumbnail"),console.log(o.url),fetch(o.url).then(r=>{if(!r.ok)throw new Error(`response status: ${r.status}`);return r.arrayBuffer()}).then(r=>{t({data:Array.from(new Uint8Array(r))})}).catch(r=>{console.error("fetch error",r),t({error:r.msg,data:null})}),!0;o.action==="downloadZip"&&chrome.downloads.download({url:o.blobUrl,filename:o.filename,saveAs:!0},r=>{chrome.runtime.lastError?console.error("Download failed:",chrome.runtime.lastError):console.log("Download started:",r)})});
