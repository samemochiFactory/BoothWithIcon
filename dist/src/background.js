chrome.runtime.onMessage.addListener((r,c,t)=>{if(r.action==="download"&&(console.log("filename:",r.filename),console.log("url:",r.url),chrome.downloads.download({url:r.url,filename:r.filename,saveAs:!0},o=>{chrome.runtime.lastError?console.error("Download error:",chrome.runtime.lastError):console.log("Download started:",o)})),r.action==="fetchItemInfo")return console.log("fetchItemInfo"),console.log(r.url),fetch(r.url).then(o=>{if(!o.ok)throw new Error(`レスポンスステータス: ${o.status}`);return o.json()}).then(o=>{t({data:o})}).catch(o=>{console.error("フェッチエラー:",o),console.error("error url:",r.url),t({error:o.msg})}),!0;if(r.action==="fetchItem")return fetch(r.url).then(e=>e.blob()).then(async e=>{console.log("send blobtype : ",e.type);const a=Math.ceil(e.size/10485760);t({status:"start",totalChunks:a,totalSize:e.size,type:e.type}),console.log("sending progress to id : ",r.progressBarId);for(let n=0;n<a;n++){const i=n*10485760,d=Math.min(i+10485760,e.size),u=e.slice(i,d),l=new FileReader;await new Promise(h=>{l.onloadend=()=>{chrome.tabs.sendMessage(c.tab.id,{action:"receiveChunk",chunkIndex:n,totalChunks:a,dataUrl:l.result,progressBarId:r.progressBarId}),h()},l.readAsDataURL(u)})}}).catch(e=>{console.error("チャンク送信エラー:",e),chrome.tabs.sendMessage(c.tab.id,{action:"downloadError",downloadId:r.downloadId,error:e.toString()})}),!0;if(r.action==="fetchThumbnail")return console.log("fetchThumbnail"),console.log(r.url),fetch(r.url).then(o=>{if(!o.ok)throw new Error(`レスポンスステータス: ${o.status}`);return o.arrayBuffer()}).then(o=>{t({data:Array.from(new Uint8Array(o))})}).catch(o=>{console.error("フェッチエラー:",o),t({error:o.msg,data:null})}),!0;r.action==="downloadZip"&&chrome.downloads.download({url:r.blobUrl,filename:r.filename,saveAs:!0},o=>{chrome.runtime.lastError?console.error("Download failed:",chrome.runtime.lastError):console.log("Download started:",o)})});
//# sourceMappingURL=background.js.map
