chrome.runtime.onMessage.addListener((t,l,o)=>{if(t.action==="fetchItemInfo")return console.log("fetchItemInfo"),console.log(t.url),fetch(t.url).then(r=>{if(!r.ok)throw new Error(`response status : ${r.status}`);return r.json()}).then(r=>{o({data:r})}).catch(r=>{console.error("fetch error:",r),console.error("error url:",t.url),o({error:r.msg})}),!0;if(t.action==="fetchItem")return fetch(t.url).then(e=>e.blob()).then(async e=>{const a=Math.ceil(e.size/10485760);o({status:"start",totalChunks:a,totalSize:e.size,type:e.type});for(let n=0;n<a;n++){const h=n*10485760,i=Math.min(h+10485760,e.size),u=e.slice(h,i),c=new FileReader;await new Promise(s=>{c.onloadend=()=>{chrome.tabs.sendMessage(l.tab.id,{action:"receiveChunk",chunkIndex:n,totalChunks:a,dataUrl:c.result,progressBarId:t.progressBarId}),s()},c.readAsDataURL(u)})}}).catch(e=>{console.error("chunk sending error:",e),chrome.tabs.sendMessage(l.tab.id,{action:"downloadError",downloadId:t.downloadId,error:e.toString()})}),!0;if(t.action==="fetchThumbnail")return console.log("fetchThumbnail"),console.log(t.url),fetch(t.url).then(r=>{if(!r.ok)throw new Error(`response status: ${r.status}`);return r.arrayBuffer()}).then(r=>{o({data:Array.from(new Uint8Array(r))})}).catch(r=>{console.error("fetch error",r),o({error:r.msg,data:null})}),!0;t.action==="downloadZip"&&chrome.downloads.download({url:t.blobUrl,filename:t.filename,saveAs:!0},r=>{chrome.runtime.lastError?console.error("Download failed:",chrome.runtime.lastError):console.log("Download started:",r)})});
//# sourceMappingURL=background.js.map
