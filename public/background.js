chrome.runtime.onMessage.addListener((r,e,l)=>{if(r.action==="download"&&(console.log("filename:",r.filename),console.log("url:",r.url),chrome.downloads.download({url:r.url,filename:r.filename,saveAs:!0},o=>{chrome.runtime.lastError?console.error("Download error:",chrome.runtime.lastError):console.log("Download started:",o)})),r.action==="fetchItemInfo")return console.log("fetchItemInfo"),console.log(r.url),fetch(r.url).then(o=>{if(!o.ok)throw new Error(`レスポンスステータス: ${o.status}`);return o.json()}).then(o=>{l({data:o})}).catch(o=>{console.error("フェッチエラー:",o),console.error("error url:",r.url),l({error:o.message})}),!0;if(r.action==="fetchItem")return console.log("fetchItem"),fetch(r.url).then(o=>o.blob()).then(o=>{const t=new FileReader;t.onload=function(){const n=t.result;console.log(n),l({blobUrl:n})},console.log("converting blob to blobUrl"),t.readAsDataURL(o)}).catch(o=>{console.error("ファイル取得エラー:",o),l({error:o.message})}),!0;if(r.action==="fetchThumbnail")return console.log("fetchThumbnail"),console.log(r.url),fetch(r.url).then(o=>{if(!o.ok)throw new Error(`レスポンスステータス: ${o.status}`);return o.arrayBuffer()}).then(o=>{l({data:Array.from(new Uint8Array(o))})}).catch(o=>{console.error("フェッチエラー:",o),l({error:o.message,data:null})}),!0;r.action==="downloadZip"&&chrome.downloads.download({url:r.blobUrl,filename:r.filename,saveAs:!0},o=>{chrome.runtime.lastError?console.error("Download failed:",chrome.runtime.lastError):console.log("Download started:",o)})});
//# sourceMappingURL=background.js.map
